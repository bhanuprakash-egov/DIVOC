// Code generated by go-swagger; DO NOT EDIT.

package certification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/divoc/api/swagger_gen/models"
)

// CertifyV4OKCode is the HTTP code returned for type CertifyV4OK
const CertifyV4OKCode int = 200

/*CertifyV4OK OK

swagger:response certifyV4OK
*/
type CertifyV4OK struct {
}

// NewCertifyV4OK creates CertifyV4OK with default headers values
func NewCertifyV4OK() *CertifyV4OK {

	return &CertifyV4OK{}
}

// WriteResponse to the client
func (o *CertifyV4OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// CertifyV4BadRequestCode is the HTTP code returned for type CertifyV4BadRequest
const CertifyV4BadRequestCode int = 400

/*CertifyV4BadRequest Invalid input

swagger:response certifyV4BadRequest
*/
type CertifyV4BadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCertifyV4BadRequest creates CertifyV4BadRequest with default headers values
func NewCertifyV4BadRequest() *CertifyV4BadRequest {

	return &CertifyV4BadRequest{}
}

// WithPayload adds the payload to the certify v4 bad request response
func (o *CertifyV4BadRequest) WithPayload(payload *models.Error) *CertifyV4BadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the certify v4 bad request response
func (o *CertifyV4BadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CertifyV4BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
